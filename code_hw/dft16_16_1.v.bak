/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 16 complex words per cycle
//   Throughput: one transform every 1 cycles
//   Latency: 11 cycles

//   Resources required:
//     24 multipliers (16 x 16 bit)
//     144 adders (16 x 16 bit)

// Generated on Wed Aug 01 08:48:31 EDT 2018

// Latency: 11 clock cycles
// Throughput: 1 transform every 1 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 1 cycles.  This means that
// 1 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 11 cycles.  This means that
// the 'next_out' will be asserted 11 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [31:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   wire [15:0] X16;
   wire [15:0] Y16;
   wire [15:0] X17;
   wire [15:0] Y17;
   wire [15:0] X18;
   wire [15:0] Y18;
   wire [15:0] X19;
   wire [15:0] Y19;
   wire [15:0] X20;
   wire [15:0] Y20;
   wire [15:0] X21;
   wire [15:0] Y21;
   wire [15:0] X22;
   wire [15:0] Y22;
   wire [15:0] X23;
   wire [15:0] Y23;
   wire [15:0] X24;
   wire [15:0] Y24;
   wire [15:0] X25;
   wire [15:0] Y25;
   wire [15:0] X26;
   wire [15:0] Y26;
   wire [15:0] X27;
   wire [15:0] Y27;
   wire [15:0] X28;
   wire [15:0] Y28;
   wire [15:0] X29;
   wire [15:0] Y29;
   wire [15:0] X30;
   wire [15:0] Y30;
   wire [15:0] X31;
   wire [15:0] Y31;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];
   assign X16 = in[16];
   assign X17 = in[17];
   assign X18 = in[18];
   assign X19 = in[19];
   assign X20 = in[20];
   assign X21 = in[21];
   assign X22 = in[22];
   assign X23 = in[23];
   assign X24 = in[24];
   assign X25 = in[25];
   assign X26 = in[26];
   assign X27 = in[27];
   assign X28 = in[28];
   assign X29 = in[29];
   assign X30 = in[30];
   assign X31 = in[31];

   initial clk = 0;

   always #10 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15),
    .X16(X16), .Y16(Y16),
    .X17(X17), .Y17(Y17),
    .X18(X18), .Y18(Y18),
    .X19(X19), .Y19(Y19),
    .X20(X20), .Y20(Y20),
    .X21(X21), .Y21(Y21),
    .X22(X22), .Y22(Y22),
    .X23(X23), .Y23(Y23),
    .X24(X24), .Y24(Y24),
    .X25(X25), .Y25(Y25),
    .X26(X26), .Y26(Y26),
    .X27(X27), .Y27(Y27),
    .X28(X28), .Y28(Y28),
    .X29(X29), .Y29(Y29),
    .X30(X30), .Y30(Y30),
    .X31(X31), .Y31(Y31));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 16 complex data points enter the system over 1 cycles
      for (j=0; j < 0; j = j+1) begin
          // Input: 16 complex words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= j*32 + k;
         end
         @(posedge clk);
      end
      j = 0;
      for (k=0; k < 32; k = k+1) begin
         in[k] <= j*32 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 0)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 0; j = j+1) begin
         // Input 32 words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= 32 + j*32 + k;
          end
          @(posedge clk);
       end
       j = 0;
       for (k=0; k < 32; k = k+1) begin
          in[k] <= 32 + j*32 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      in[16] <= 0;
      in[17] <= 0;
      in[18] <= 0;
      in[19] <= 0;
      in[20] <= 0;
      in[21] <= 0;
      in[22] <= 0;
      in[23] <= 0;
      in[24] <= 0;
      in[25] <= 0;
      in[26] <= 0;
      in[27] <= 0;
      in[28] <= 0;
      in[29] <= 0;
      in[30] <= 0;
      in[31] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      $finish;
   end
endmodule

// Latency: 11
// Gap: 1
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire [15:0] t0_16;
   wire [15:0] t0_17;
   wire [15:0] t0_18;
   wire [15:0] t0_19;
   wire [15:0] t0_20;
   wire [15:0] t0_21;
   wire [15:0] t0_22;
   wire [15:0] t0_23;
   wire [15:0] t0_24;
   wire [15:0] t0_25;
   wire [15:0] t0_26;
   wire [15:0] t0_27;
   wire [15:0] t0_28;
   wire [15:0] t0_29;
   wire [15:0] t0_30;
   wire [15:0] t0_31;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire [15:0] t1_16;
   wire [15:0] t1_17;
   wire [15:0] t1_18;
   wire [15:0] t1_19;
   wire [15:0] t1_20;
   wire [15:0] t1_21;
   wire [15:0] t1_22;
   wire [15:0] t1_23;
   wire [15:0] t1_24;
   wire [15:0] t1_25;
   wire [15:0] t1_26;
   wire [15:0] t1_27;
   wire [15:0] t1_28;
   wire [15:0] t1_29;
   wire [15:0] t1_30;
   wire [15:0] t1_31;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire [15:0] t2_16;
   wire [15:0] t2_17;
   wire [15:0] t2_18;
   wire [15:0] t2_19;
   wire [15:0] t2_20;
   wire [15:0] t2_21;
   wire [15:0] t2_22;
   wire [15:0] t2_23;
   wire [15:0] t2_24;
   wire [15:0] t2_25;
   wire [15:0] t2_26;
   wire [15:0] t2_27;
   wire [15:0] t2_28;
   wire [15:0] t2_29;
   wire [15:0] t2_30;
   wire [15:0] t2_31;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire [15:0] t3_16;
   wire [15:0] t3_17;
   wire [15:0] t3_18;
   wire [15:0] t3_19;
   wire [15:0] t3_20;
   wire [15:0] t3_21;
   wire [15:0] t3_22;
   wire [15:0] t3_23;
   wire [15:0] t3_24;
   wire [15:0] t3_25;
   wire [15:0] t3_26;
   wire [15:0] t3_27;
   wire [15:0] t3_28;
   wire [15:0] t3_29;
   wire [15:0] t3_30;
   wire [15:0] t3_31;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire [15:0] t4_16;
   wire [15:0] t4_17;
   wire [15:0] t4_18;
   wire [15:0] t4_19;
   wire [15:0] t4_20;
   wire [15:0] t4_21;
   wire [15:0] t4_22;
   wire [15:0] t4_23;
   wire [15:0] t4_24;
   wire [15:0] t4_25;
   wire [15:0] t4_26;
   wire [15:0] t4_27;
   wire [15:0] t4_28;
   wire [15:0] t4_29;
   wire [15:0] t4_30;
   wire [15:0] t4_31;
   wire next_4;
   assign t0_0 = X0;
   assign Y0 = t4_0;
   assign t0_1 = X1;
   assign Y1 = t4_1;
   assign t0_2 = X2;
   assign Y2 = t4_2;
   assign t0_3 = X3;
   assign Y3 = t4_3;
   assign t0_4 = X4;
   assign Y4 = t4_4;
   assign t0_5 = X5;
   assign Y5 = t4_5;
   assign t0_6 = X6;
   assign Y6 = t4_6;
   assign t0_7 = X7;
   assign Y7 = t4_7;
   assign t0_8 = X8;
   assign Y8 = t4_8;
   assign t0_9 = X9;
   assign Y9 = t4_9;
   assign t0_10 = X10;
   assign Y10 = t4_10;
   assign t0_11 = X11;
   assign Y11 = t4_11;
   assign t0_12 = X12;
   assign Y12 = t4_12;
   assign t0_13 = X13;
   assign Y13 = t4_13;
   assign t0_14 = X14;
   assign Y14 = t4_14;
   assign t0_15 = X15;
   assign Y15 = t4_15;
   assign t0_16 = X16;
   assign Y16 = t4_16;
   assign t0_17 = X17;
   assign Y17 = t4_17;
   assign t0_18 = X18;
   assign Y18 = t4_18;
   assign t0_19 = X19;
   assign Y19 = t4_19;
   assign t0_20 = X20;
   assign Y20 = t4_20;
   assign t0_21 = X21;
   assign Y21 = t4_21;
   assign t0_22 = X22;
   assign Y22 = t4_22;
   assign t0_23 = X23;
   assign Y23 = t4_23;
   assign t0_24 = X24;
   assign Y24 = t4_24;
   assign t0_25 = X25;
   assign Y25 = t4_25;
   assign t0_26 = X26;
   assign Y26 = t4_26;
   assign t0_27 = X27;
   assign Y27 = t4_27;
   assign t0_28 = X28;
   assign Y28 = t4_28;
   assign t0_29 = X29;
   assign Y29 = t4_29;
   assign t0_30 = X30;
   assign Y30 = t4_30;
   assign t0_31 = X31;
   assign Y31 = t4_31;
   assign next_0 = next;
   assign next_out = next_4;

// latency=1, gap=1
   codeBlock10917 stage0(.clk(clk), .reset(reset), .next_in(next_0), .next_out(next_1),
       .X0_in(t0_0), .Y0(t1_0),
       .X1_in(t0_1), .Y1(t1_1),
       .X2_in(t0_2), .Y2(t1_2),
       .X3_in(t0_3), .Y3(t1_3),
       .X4_in(t0_4), .Y4(t1_4),
       .X5_in(t0_5), .Y5(t1_5),
       .X6_in(t0_6), .Y6(t1_6),
       .X7_in(t0_7), .Y7(t1_7),
       .X8_in(t0_8), .Y8(t1_8),
       .X9_in(t0_9), .Y9(t1_9),
       .X10_in(t0_10), .Y10(t1_10),
       .X11_in(t0_11), .Y11(t1_11),
       .X12_in(t0_12), .Y12(t1_12),
       .X13_in(t0_13), .Y13(t1_13),
       .X14_in(t0_14), .Y14(t1_14),
       .X15_in(t0_15), .Y15(t1_15),
       .X16_in(t0_16), .Y16(t1_16),
       .X17_in(t0_17), .Y17(t1_17),
       .X18_in(t0_18), .Y18(t1_18),
       .X19_in(t0_19), .Y19(t1_19),
       .X20_in(t0_20), .Y20(t1_20),
       .X21_in(t0_21), .Y21(t1_21),
       .X22_in(t0_22), .Y22(t1_22),
       .X23_in(t0_23), .Y23(t1_23),
       .X24_in(t0_24), .Y24(t1_24),
       .X25_in(t0_25), .Y25(t1_25),
       .X26_in(t0_26), .Y26(t1_26),
       .X27_in(t0_27), .Y27(t1_27),
       .X28_in(t0_28), .Y28(t1_28),
       .X29_in(t0_29), .Y29(t1_29),
       .X30_in(t0_30), .Y30(t1_30),
       .X31_in(t0_31), .Y31(t1_31));


// latency=3, gap=1
   codeBlock11047 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15),
       .X16_in(t1_16), .Y16(t2_16),
       .X17_in(t1_17), .Y17(t2_17),
       .X18_in(t1_18), .Y18(t2_18),
       .X19_in(t1_19), .Y19(t2_19),
       .X20_in(t1_20), .Y20(t2_20),
       .X21_in(t1_21), .Y21(t2_21),
       .X22_in(t1_22), .Y22(t2_22),
       .X23_in(t1_23), .Y23(t2_23),
       .X24_in(t1_24), .Y24(t2_24),
       .X25_in(t1_25), .Y25(t2_25),
       .X26_in(t1_26), .Y26(t2_26),
       .X27_in(t1_27), .Y27(t2_27),
       .X28_in(t1_28), .Y28(t2_28),
       .X29_in(t1_29), .Y29(t2_29),
       .X30_in(t1_30), .Y30(t2_30),
       .X31_in(t1_31), .Y31(t2_31));


// latency=6, gap=1
   codeBlock11882 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15),
       .X16_in(t2_16), .Y16(t3_16),
       .X17_in(t2_17), .Y17(t3_17),
       .X18_in(t2_18), .Y18(t3_18),
       .X19_in(t2_19), .Y19(t3_19),
       .X20_in(t2_20), .Y20(t3_20),
       .X21_in(t2_21), .Y21(t3_21),
       .X22_in(t2_22), .Y22(t3_22),
       .X23_in(t2_23), .Y23(t3_23),
       .X24_in(t2_24), .Y24(t3_24),
       .X25_in(t2_25), .Y25(t3_25),
       .X26_in(t2_26), .Y26(t3_26),
       .X27_in(t2_27), .Y27(t3_27),
       .X28_in(t2_28), .Y28(t3_28),
       .X29_in(t2_29), .Y29(t3_29),
       .X30_in(t2_30), .Y30(t3_30),
       .X31_in(t2_31), .Y31(t3_31));


// latency=1, gap=1
   codeBlock12965 stage3(.clk(clk), .reset(reset), .next_in(next_3), .next_out(next_4),
       .X0_in(t3_0), .Y0(t4_0),
       .X1_in(t3_1), .Y1(t4_1),
       .X2_in(t3_2), .Y2(t4_2),
       .X3_in(t3_3), .Y3(t4_3),
       .X4_in(t3_4), .Y4(t4_4),
       .X5_in(t3_5), .Y5(t4_5),
       .X6_in(t3_6), .Y6(t4_6),
       .X7_in(t3_7), .Y7(t4_7),
       .X8_in(t3_8), .Y8(t4_8),
       .X9_in(t3_9), .Y9(t4_9),
       .X10_in(t3_10), .Y10(t4_10),
       .X11_in(t3_11), .Y11(t4_11),
       .X12_in(t3_12), .Y12(t4_12),
       .X13_in(t3_13), .Y13(t4_13),
       .X14_in(t3_14), .Y14(t4_14),
       .X15_in(t3_15), .Y15(t4_15),
       .X16_in(t3_16), .Y16(t4_16),
       .X17_in(t3_17), .Y17(t4_17),
       .X18_in(t3_18), .Y18(t4_18),
       .X19_in(t3_19), .Y19(t4_19),
       .X20_in(t3_20), .Y20(t4_20),
       .X21_in(t3_21), .Y21(t4_21),
       .X22_in(t3_22), .Y22(t4_22),
       .X23_in(t3_23), .Y23(t4_23),
       .X24_in(t3_24), .Y24(t4_24),
       .X25_in(t3_25), .Y25(t4_25),
       .X26_in(t3_26), .Y26(t4_26),
       .X27_in(t3_27), .Y27(t4_27),
       .X28_in(t3_28), .Y28(t4_28),
       .X29_in(t3_29), .Y29(t4_29),
       .X30_in(t3_30), .Y30(t4_30),
       .X31_in(t3_31), .Y31(t4_31));


endmodule

// Latency: 1
// Gap: 1
module codeBlock10917(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   assign next_out = next;


   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;


   assign Y0 = X0;
   assign Y1 = X1;
   assign Y2 = X8;
   assign Y3 = X9;
   assign Y4 = X16;
   assign Y5 = X17;
   assign Y6 = X24;
   assign Y7 = X25;
   assign Y8 = X2;
   assign Y9 = X3;
   assign Y10 = X10;
   assign Y11 = X11;
   assign Y12 = X18;
   assign Y13 = X19;
   assign Y14 = X26;
   assign Y15 = X27;
   assign Y16 = X4;
   assign Y17 = X5;
   assign Y18 = X12;
   assign Y19 = X13;
   assign Y20 = X20;
   assign Y21 = X21;
   assign Y22 = X28;
   assign Y23 = X29;
   assign Y24 = X6;
   assign Y25 = X7;
   assign Y26 = X14;
   assign Y27 = X15;
   assign Y28 = X22;
   assign Y29 = X23;
   assign Y30 = X30;
   assign Y31 = X31;



   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock11047(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(2, 1) shiftFIFO_13900(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a241;
   wire signed [15:0] a242;
   wire signed [15:0] a243;
   wire signed [15:0] a244;
   wire signed [15:0] a249;
   wire signed [15:0] a250;
   wire signed [15:0] a251;
   wire signed [15:0] a252;
   wire signed [15:0] a257;
   wire signed [15:0] a258;
   wire signed [15:0] a259;
   wire signed [15:0] a260;
   wire signed [15:0] a265;
   wire signed [15:0] a266;
   wire signed [15:0] a267;
   wire signed [15:0] a268;
   wire signed [15:0] a273;
   wire signed [15:0] a274;
   wire signed [15:0] a275;
   wire signed [15:0] a276;
   wire signed [15:0] a281;
   wire signed [15:0] a282;
   wire signed [15:0] a283;
   wire signed [15:0] a284;
   wire signed [15:0] a289;
   wire signed [15:0] a290;
   wire signed [15:0] a291;
   wire signed [15:0] a292;
   wire signed [15:0] a297;
   wire signed [15:0] a298;
   wire signed [15:0] a299;
   wire signed [15:0] a300;
   wire signed [16:0] tm24;
   wire signed [16:0] tm25;
   wire signed [16:0] tm26;
   wire signed [16:0] tm27;
   wire signed [16:0] tm28;
   wire signed [16:0] tm29;
   wire signed [16:0] tm30;
   wire signed [16:0] tm31;
   wire signed [16:0] tm40;
   wire signed [16:0] tm41;
   wire signed [16:0] tm42;
   wire signed [16:0] tm43;
   wire signed [16:0] tm44;
   wire signed [16:0] tm45;
   wire signed [16:0] tm46;
   wire signed [16:0] tm47;
   wire signed [16:0] tm56;
   wire signed [16:0] tm57;
   wire signed [16:0] tm58;
   wire signed [16:0] tm59;
   wire signed [16:0] tm60;
   wire signed [16:0] tm61;
   wire signed [16:0] tm62;
   wire signed [16:0] tm63;
   wire signed [16:0] tm72;
   wire signed [16:0] tm73;
   wire signed [16:0] tm74;
   wire signed [16:0] tm75;
   wire signed [16:0] tm76;
   wire signed [16:0] tm77;
   wire signed [16:0] tm78;
   wire signed [16:0] tm79;
   wire signed [15:0] t930;
   wire signed [15:0] t931;
   wire signed [15:0] t932;
   wire signed [15:0] t933;
   wire signed [15:0] t934;
   wire signed [15:0] t935;
   wire signed [15:0] t936;
   wire signed [15:0] t937;
   wire signed [15:0] t946;
   wire signed [15:0] t947;
   wire signed [15:0] t948;
   wire signed [15:0] t949;
   wire signed [15:0] t950;
   wire signed [15:0] t951;
   wire signed [15:0] t952;
   wire signed [15:0] t953;
   wire signed [15:0] t962;
   wire signed [15:0] t963;
   wire signed [15:0] t964;
   wire signed [15:0] t965;
   wire signed [15:0] t966;
   wire signed [15:0] t967;
   wire signed [15:0] t968;
   wire signed [15:0] t969;
   wire signed [15:0] t978;
   wire signed [15:0] t979;
   wire signed [15:0] t980;
   wire signed [15:0] t981;
   wire signed [15:0] t982;
   wire signed [15:0] t983;
   wire signed [15:0] t984;
   wire signed [15:0] t985;
   wire signed [16:0] tm32;
   wire signed [16:0] tm33;
   wire signed [16:0] tm34;
   wire signed [16:0] tm35;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm36;
   wire signed [16:0] tm37;
   wire signed [16:0] tm38;
   wire signed [16:0] tm39;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm48;
   wire signed [16:0] tm49;
   wire signed [16:0] tm50;
   wire signed [16:0] tm51;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm52;
   wire signed [16:0] tm53;
   wire signed [16:0] tm54;
   wire signed [16:0] tm55;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm64;
   wire signed [16:0] tm65;
   wire signed [16:0] tm66;
   wire signed [16:0] tm67;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm68;
   wire signed [16:0] tm69;
   wire signed [16:0] tm70;
   wire signed [16:0] tm71;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm80;
   wire signed [16:0] tm81;
   wire signed [16:0] tm82;
   wire signed [16:0] tm83;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm84;
   wire signed [16:0] tm85;
   wire signed [16:0] tm86;
   wire signed [16:0] tm87;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t938;
   wire signed [15:0] t939;
   wire signed [15:0] t940;
   wire signed [15:0] t941;
   wire signed [15:0] t942;
   wire signed [15:0] t943;
   wire signed [15:0] t944;
   wire signed [15:0] t945;
   wire signed [15:0] t954;
   wire signed [15:0] t955;
   wire signed [15:0] t956;
   wire signed [15:0] t957;
   wire signed [15:0] t958;
   wire signed [15:0] t959;
   wire signed [15:0] t960;
   wire signed [15:0] t961;
   wire signed [15:0] t970;
   wire signed [15:0] t971;
   wire signed [15:0] t972;
   wire signed [15:0] t973;
   wire signed [15:0] t974;
   wire signed [15:0] t975;
   wire signed [15:0] t976;
   wire signed [15:0] t977;
   wire signed [15:0] t986;
   wire signed [15:0] t987;
   wire signed [15:0] t988;
   wire signed [15:0] t989;
   wire signed [15:0] t990;
   wire signed [15:0] t991;
   wire signed [15:0] t992;
   wire signed [15:0] t993;


   assign a241 = X0;
   assign a242 = X4;
   assign a243 = X1;
   assign a244 = X5;
   assign a249 = X2;
   assign a250 = X6;
   assign a251 = X3;
   assign a252 = X7;
   assign a257 = X8;
   assign a258 = X12;
   assign a259 = X9;
   assign a260 = X13;
   assign a265 = X10;
   assign a266 = X14;
   assign a267 = X11;
   assign a268 = X15;
   assign a273 = X16;
   assign a274 = X20;
   assign a275 = X17;
   assign a276 = X21;
   assign a281 = X18;
   assign a282 = X22;
   assign a283 = X19;
   assign a284 = X23;
   assign a289 = X24;
   assign a290 = X28;
   assign a291 = X25;
   assign a292 = X29;
   assign a297 = X26;
   assign a298 = X30;
   assign a299 = X27;
   assign a300 = X31;
   assign t930 = tm24[16:1];
   assign t931 = tm25[16:1];
   assign t932 = tm26[16:1];
   assign t933 = tm27[16:1];
   assign t934 = tm28[16:1];
   assign t935 = tm29[16:1];
   assign t936 = tm30[16:1];
   assign t937 = tm31[16:1];
   assign t946 = tm40[16:1];
   assign t947 = tm41[16:1];
   assign t948 = tm42[16:1];
   assign t949 = tm43[16:1];
   assign t950 = tm44[16:1];
   assign t951 = tm45[16:1];
   assign t952 = tm46[16:1];
   assign t953 = tm47[16:1];
   assign t962 = tm56[16:1];
   assign t963 = tm57[16:1];
   assign t964 = tm58[16:1];
   assign t965 = tm59[16:1];
   assign t966 = tm60[16:1];
   assign t967 = tm61[16:1];
   assign t968 = tm62[16:1];
   assign t969 = tm63[16:1];
   assign t978 = tm72[16:1];
   assign t979 = tm73[16:1];
   assign t980 = tm74[16:1];
   assign t981 = tm75[16:1];
   assign t982 = tm76[16:1];
   assign t983 = tm77[16:1];
   assign t984 = tm78[16:1];
   assign t985 = tm79[16:1];
   assign Y0 = t938;
   assign Y1 = t939;
   assign Y4 = t940;
   assign Y5 = t941;
   assign Y2 = t942;
   assign Y3 = t943;
   assign Y6 = t944;
   assign Y7 = t945;
   assign Y8 = t954;
   assign Y9 = t955;
   assign Y12 = t956;
   assign Y13 = t957;
   assign Y10 = t958;
   assign Y11 = t959;
   assign Y14 = t960;
   assign Y15 = t961;
   assign Y16 = t970;
   assign Y17 = t971;
   assign Y20 = t972;
   assign Y21 = t973;
   assign Y18 = t974;
   assign Y19 = t975;
   assign Y22 = t976;
   assign Y23 = t977;
   assign Y24 = t986;
   assign Y25 = t987;
   assign Y28 = t988;
   assign Y29 = t989;
   assign Y26 = t990;
   assign Y27 = t991;
   assign Y30 = t992;
   assign Y31 = t993;
   assign t938 = tm32[16:1];
   assign t939 = tm33[16:1];
   assign t940 = tm34[16:1];
   assign t941 = tm35[16:1];
   assign t942 = tm36[16:1];
   assign t943 = tm37[16:1];
   assign t944 = tm38[16:1];
   assign t945 = tm39[16:1];
   assign t954 = tm48[16:1];
   assign t955 = tm49[16:1];
   assign t956 = tm50[16:1];
   assign t957 = tm51[16:1];
   assign t958 = tm52[16:1];
   assign t959 = tm53[16:1];
   assign t960 = tm54[16:1];
   assign t961 = tm55[16:1];
   assign t970 = tm64[16:1];
   assign t971 = tm65[16:1];
   assign t972 = tm66[16:1];
   assign t973 = tm67[16:1];
   assign t974 = tm68[16:1];
   assign t975 = tm69[16:1];
   assign t976 = tm70[16:1];
   assign t977 = tm71[16:1];
   assign t986 = tm80[16:1];
   assign t987 = tm81[16:1];
   assign t988 = tm82[16:1];
   assign t989 = tm83[16:1];
   assign t990 = tm84[16:1];
   assign t991 = tm85[16:1];
   assign t992 = tm86[16:1];
   assign t993 = tm87[16:1];

    addfxp #(17, 1) add11059(.a({{1{a241[15]}}, a241}), .b({{1{a242[15]}}, a242}), .clk(clk), .q(tm24));    // 0
    addfxp #(17, 1) add11074(.a({{1{a243[15]}}, a243}), .b({{1{a244[15]}}, a244}), .clk(clk), .q(tm25));    // 0
    subfxp #(17, 1) sub11089(.a({{1{a241[15]}}, a241}), .b({{1{a242[15]}}, a242}), .clk(clk), .q(tm26));    // 0
    subfxp #(17, 1) sub11104(.a({{1{a243[15]}}, a243}), .b({{1{a244[15]}}, a244}), .clk(clk), .q(tm27));    // 0
    addfxp #(17, 1) add11119(.a({{1{a249[15]}}, a249}), .b({{1{a250[15]}}, a250}), .clk(clk), .q(tm28));    // 0
    addfxp #(17, 1) add11134(.a({{1{a251[15]}}, a251}), .b({{1{a252[15]}}, a252}), .clk(clk), .q(tm29));    // 0
    subfxp #(17, 1) sub11149(.a({{1{a249[15]}}, a249}), .b({{1{a250[15]}}, a250}), .clk(clk), .q(tm30));    // 0
    subfxp #(17, 1) sub11164(.a({{1{a251[15]}}, a251}), .b({{1{a252[15]}}, a252}), .clk(clk), .q(tm31));    // 0
    addfxp #(17, 1) add11267(.a({{1{a257[15]}}, a257}), .b({{1{a258[15]}}, a258}), .clk(clk), .q(tm40));    // 0
    addfxp #(17, 1) add11282(.a({{1{a259[15]}}, a259}), .b({{1{a260[15]}}, a260}), .clk(clk), .q(tm41));    // 0
    subfxp #(17, 1) sub11297(.a({{1{a257[15]}}, a257}), .b({{1{a258[15]}}, a258}), .clk(clk), .q(tm42));    // 0
    subfxp #(17, 1) sub11312(.a({{1{a259[15]}}, a259}), .b({{1{a260[15]}}, a260}), .clk(clk), .q(tm43));    // 0
    addfxp #(17, 1) add11327(.a({{1{a265[15]}}, a265}), .b({{1{a266[15]}}, a266}), .clk(clk), .q(tm44));    // 0
    addfxp #(17, 1) add11342(.a({{1{a267[15]}}, a267}), .b({{1{a268[15]}}, a268}), .clk(clk), .q(tm45));    // 0
    subfxp #(17, 1) sub11357(.a({{1{a265[15]}}, a265}), .b({{1{a266[15]}}, a266}), .clk(clk), .q(tm46));    // 0
    subfxp #(17, 1) sub11372(.a({{1{a267[15]}}, a267}), .b({{1{a268[15]}}, a268}), .clk(clk), .q(tm47));    // 0
    addfxp #(17, 1) add11475(.a({{1{a273[15]}}, a273}), .b({{1{a274[15]}}, a274}), .clk(clk), .q(tm56));    // 0
    addfxp #(17, 1) add11490(.a({{1{a275[15]}}, a275}), .b({{1{a276[15]}}, a276}), .clk(clk), .q(tm57));    // 0
    subfxp #(17, 1) sub11505(.a({{1{a273[15]}}, a273}), .b({{1{a274[15]}}, a274}), .clk(clk), .q(tm58));    // 0
    subfxp #(17, 1) sub11520(.a({{1{a275[15]}}, a275}), .b({{1{a276[15]}}, a276}), .clk(clk), .q(tm59));    // 0
    addfxp #(17, 1) add11535(.a({{1{a281[15]}}, a281}), .b({{1{a282[15]}}, a282}), .clk(clk), .q(tm60));    // 0
    addfxp #(17, 1) add11550(.a({{1{a283[15]}}, a283}), .b({{1{a284[15]}}, a284}), .clk(clk), .q(tm61));    // 0
    subfxp #(17, 1) sub11565(.a({{1{a281[15]}}, a281}), .b({{1{a282[15]}}, a282}), .clk(clk), .q(tm62));    // 0
    subfxp #(17, 1) sub11580(.a({{1{a283[15]}}, a283}), .b({{1{a284[15]}}, a284}), .clk(clk), .q(tm63));    // 0
    addfxp #(17, 1) add11683(.a({{1{a289[15]}}, a289}), .b({{1{a290[15]}}, a290}), .clk(clk), .q(tm72));    // 0
    addfxp #(17, 1) add11698(.a({{1{a291[15]}}, a291}), .b({{1{a292[15]}}, a292}), .clk(clk), .q(tm73));    // 0
    subfxp #(17, 1) sub11713(.a({{1{a289[15]}}, a289}), .b({{1{a290[15]}}, a290}), .clk(clk), .q(tm74));    // 0
    subfxp #(17, 1) sub11728(.a({{1{a291[15]}}, a291}), .b({{1{a292[15]}}, a292}), .clk(clk), .q(tm75));    // 0
    addfxp #(17, 1) add11743(.a({{1{a297[15]}}, a297}), .b({{1{a298[15]}}, a298}), .clk(clk), .q(tm76));    // 0
    addfxp #(17, 1) add11758(.a({{1{a299[15]}}, a299}), .b({{1{a300[15]}}, a300}), .clk(clk), .q(tm77));    // 0
    subfxp #(17, 1) sub11773(.a({{1{a297[15]}}, a297}), .b({{1{a298[15]}}, a298}), .clk(clk), .q(tm78));    // 0
    subfxp #(17, 1) sub11788(.a({{1{a299[15]}}, a299}), .b({{1{a300[15]}}, a300}), .clk(clk), .q(tm79));    // 0
    addfxp #(17, 1) add11171(.a({{1{t930[15]}}, t930}), .b({{1{t934[15]}}, t934}), .clk(clk), .q(tm32));    // 1
    addfxp #(17, 1) add11178(.a({{1{t931[15]}}, t931}), .b({{1{t935[15]}}, t935}), .clk(clk), .q(tm33));    // 1
    subfxp #(17, 1) sub11185(.a({{1{t930[15]}}, t930}), .b({{1{t934[15]}}, t934}), .clk(clk), .q(tm34));    // 1
    subfxp #(17, 1) sub11192(.a({{1{t931[15]}}, t931}), .b({{1{t935[15]}}, t935}), .clk(clk), .q(tm35));    // 1
    addfxp #(17, 1) add11215(.a({{1{t932[15]}}, t932}), .b({{1{t937[15]}}, t937}), .clk(clk), .q(tm36));    // 1
    subfxp #(17, 1) sub11222(.a({{1{t933[15]}}, t933}), .b({{1{t936[15]}}, t936}), .clk(clk), .q(tm37));    // 1
    subfxp #(17, 1) sub11229(.a({{1{t932[15]}}, t932}), .b({{1{t937[15]}}, t937}), .clk(clk), .q(tm38));    // 1
    addfxp #(17, 1) add11236(.a({{1{t933[15]}}, t933}), .b({{1{t936[15]}}, t936}), .clk(clk), .q(tm39));    // 1
    addfxp #(17, 1) add11379(.a({{1{t946[15]}}, t946}), .b({{1{t950[15]}}, t950}), .clk(clk), .q(tm48));    // 1
    addfxp #(17, 1) add11386(.a({{1{t947[15]}}, t947}), .b({{1{t951[15]}}, t951}), .clk(clk), .q(tm49));    // 1
    subfxp #(17, 1) sub11393(.a({{1{t946[15]}}, t946}), .b({{1{t950[15]}}, t950}), .clk(clk), .q(tm50));    // 1
    subfxp #(17, 1) sub11400(.a({{1{t947[15]}}, t947}), .b({{1{t951[15]}}, t951}), .clk(clk), .q(tm51));    // 1
    addfxp #(17, 1) add11423(.a({{1{t948[15]}}, t948}), .b({{1{t953[15]}}, t953}), .clk(clk), .q(tm52));    // 1
    subfxp #(17, 1) sub11430(.a({{1{t949[15]}}, t949}), .b({{1{t952[15]}}, t952}), .clk(clk), .q(tm53));    // 1
    subfxp #(17, 1) sub11437(.a({{1{t948[15]}}, t948}), .b({{1{t953[15]}}, t953}), .clk(clk), .q(tm54));    // 1
    addfxp #(17, 1) add11444(.a({{1{t949[15]}}, t949}), .b({{1{t952[15]}}, t952}), .clk(clk), .q(tm55));    // 1
    addfxp #(17, 1) add11587(.a({{1{t962[15]}}, t962}), .b({{1{t966[15]}}, t966}), .clk(clk), .q(tm64));    // 1
    addfxp #(17, 1) add11594(.a({{1{t963[15]}}, t963}), .b({{1{t967[15]}}, t967}), .clk(clk), .q(tm65));    // 1
    subfxp #(17, 1) sub11601(.a({{1{t962[15]}}, t962}), .b({{1{t966[15]}}, t966}), .clk(clk), .q(tm66));    // 1
    subfxp #(17, 1) sub11608(.a({{1{t963[15]}}, t963}), .b({{1{t967[15]}}, t967}), .clk(clk), .q(tm67));    // 1
    addfxp #(17, 1) add11631(.a({{1{t964[15]}}, t964}), .b({{1{t969[15]}}, t969}), .clk(clk), .q(tm68));    // 1
    subfxp #(17, 1) sub11638(.a({{1{t965[15]}}, t965}), .b({{1{t968[15]}}, t968}), .clk(clk), .q(tm69));    // 1
    subfxp #(17, 1) sub11645(.a({{1{t964[15]}}, t964}), .b({{1{t969[15]}}, t969}), .clk(clk), .q(tm70));    // 1
    addfxp #(17, 1) add11652(.a({{1{t965[15]}}, t965}), .b({{1{t968[15]}}, t968}), .clk(clk), .q(tm71));    // 1
    addfxp #(17, 1) add11795(.a({{1{t978[15]}}, t978}), .b({{1{t982[15]}}, t982}), .clk(clk), .q(tm80));    // 1
    addfxp #(17, 1) add11802(.a({{1{t979[15]}}, t979}), .b({{1{t983[15]}}, t983}), .clk(clk), .q(tm81));    // 1
    subfxp #(17, 1) sub11809(.a({{1{t978[15]}}, t978}), .b({{1{t982[15]}}, t982}), .clk(clk), .q(tm82));    // 1
    subfxp #(17, 1) sub11816(.a({{1{t979[15]}}, t979}), .b({{1{t983[15]}}, t983}), .clk(clk), .q(tm83));    // 1
    addfxp #(17, 1) add11839(.a({{1{t980[15]}}, t980}), .b({{1{t985[15]}}, t985}), .clk(clk), .q(tm84));    // 1
    subfxp #(17, 1) sub11846(.a({{1{t981[15]}}, t981}), .b({{1{t984[15]}}, t984}), .clk(clk), .q(tm85));    // 1
    subfxp #(17, 1) sub11853(.a({{1{t980[15]}}, t980}), .b({{1{t985[15]}}, t985}), .clk(clk), .q(tm86));    // 1
    addfxp #(17, 1) add11860(.a({{1{t981[15]}}, t981}), .b({{1{t984[15]}}, t984}), .clk(clk), .q(tm87));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 6
// Gap: 1
module codeBlock11882(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(5, 1) shiftFIFO_13903(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a121;
   wire signed [15:0] a122;
   wire signed [15:0] a123;
   wire signed [15:0] a124;
   wire signed [15:0] a129;
   wire signed [15:0] a130;
   wire signed [15:0] a131;
   wire signed [15:0] a132;
   wire signed [15:0] a137;
   wire signed [15:0] a138;
   wire signed [15:0] a139;
   wire signed [15:0] a140;
   wire signed [15:0] a143;
   wire signed [15:0] a144;
   wire signed [15:0] a147;
   wire signed [15:0] a148;
   wire signed [15:0] a151;
   wire signed [15:0] a152;
   wire signed [15:0] a153;
   wire signed [15:0] a154;
   wire signed [15:0] a159;
   wire signed [15:0] a160;
   wire signed [15:0] a161;
   wire signed [15:0] a162;
   wire signed [15:0] a163;
   wire signed [15:0] a164;
   wire signed [15:0] a165;
   wire signed [15:0] a166;
   wire signed [15:0] a169;
   wire signed [15:0] a170;
   wire signed [15:0] a173;
   wire signed [15:0] a174;
   wire signed [16:0] tm88;
   wire signed [16:0] tm89;
   wire signed [16:0] tm90;
   wire signed [16:0] tm91;
   wire signed [16:0] tm92;
   wire signed [16:0] tm93;
   wire signed [16:0] tm94;
   wire signed [16:0] tm95;
   wire signed [16:0] tm120;
   wire signed [16:0] tm121;
   wire signed [16:0] tm122;
   wire signed [16:0] tm123;
   wire signed [15:0] t450;
   wire signed [15:0] t451;
   wire signed [15:0] t452;
   wire signed [15:0] t453;
   wire signed [15:0] t454;
   wire signed [15:0] t455;
   wire signed [15:0] t456;
   wire signed [15:0] t457;
   wire signed [15:0] t488;
   wire signed [15:0] t489;
   wire signed [15:0] t490;
   wire signed [15:0] t491;
   reg signed [15:0] tm152;
   reg signed [15:0] tm155;
   reg signed [15:0] tm188;
   reg signed [15:0] tm191;
   wire signed [16:0] tm96;
   wire signed [16:0] tm97;
   wire signed [16:0] tm98;
   wire signed [16:0] tm99;
   wire signed [16:0] tm100;
   wire signed [16:0] tm101;
   wire signed [16:0] tm102;
   wire signed [16:0] tm103;
   wire signed [15:0] a97;
   wire signed [15:0] a98;
   wire signed [15:0] a99;
   wire signed [15:0] a100;
   wire signed [15:0] a101;
   wire signed [15:0] a102;
   wire signed [15:0] a103;
   wire signed [15:0] a104;
   wire signed [15:0] a105;
   wire signed [15:0] a106;
   wire signed [15:0] a107;
   wire signed [15:0] a108;
   wire signed [15:0] a109;
   wire signed [15:0] a110;
   wire signed [15:0] a111;
   wire signed [15:0] a112;
   wire signed [15:0] a113;
   wire signed [15:0] a114;
   wire signed [15:0] a115;
   wire signed [15:0] a116;
   wire signed [15:0] a117;
   wire signed [15:0] a118;
   wire signed [15:0] a119;
   wire signed [15:0] a120;
   wire signed [15:0] t458;
   wire signed [15:0] t459;
   wire signed [15:0] t460;
   wire signed [15:0] t461;
   wire signed [15:0] t462;
   wire signed [15:0] t463;
   wire signed [15:0] t464;
   wire signed [15:0] t465;
   reg signed [15:0] tm153;
   reg signed [15:0] tm156;
   reg signed [15:0] tm164;
   reg signed [15:0] tm167;
   reg signed [15:0] tm176;
   reg signed [15:0] tm179;
   reg signed [15:0] tm189;
   reg signed [15:0] tm192;
   wire signed [15:0] t466;
   wire signed [15:0] t467;
   wire signed [15:0] t472;
   wire signed [15:0] t473;
   wire signed [15:0] t474;
   wire signed [15:0] t475;
   wire signed [15:0] t492;
   wire signed [15:0] t493;
   wire signed [15:0] t494;
   wire signed [15:0] t495;
   wire signed [15:0] t508;
   wire signed [15:0] t509;
   wire signed [15:0] t514;
   wire signed [15:0] t515;
   wire signed [15:0] t516;
   wire signed [15:0] t517;
   reg signed [15:0] tm154;
   reg signed [15:0] tm157;
   reg signed [15:0] tm165;
   reg signed [15:0] tm168;
   reg signed [15:0] tm177;
   reg signed [15:0] tm180;
   reg signed [15:0] tm190;
   reg signed [15:0] tm193;
   reg signed [15:0] tm200;
   reg signed [15:0] tm203;
   reg signed [15:0] tm206;
   reg signed [15:0] tm209;
   reg signed [15:0] tm212;
   reg signed [15:0] tm215;
   reg signed [15:0] tm218;
   reg signed [15:0] tm221;
   wire signed [16:0] tm104;
   wire signed [16:0] tm105;
   wire signed [16:0] tm106;
   wire signed [16:0] tm107;
   wire signed [16:0] tm108;
   wire signed [16:0] tm109;
   wire signed [16:0] tm110;
   wire signed [16:0] tm111;
   wire signed [16:0] tm124;
   wire signed [16:0] tm125;
   wire signed [16:0] tm126;
   wire signed [16:0] tm127;
   wire signed [16:0] tm136;
   wire signed [16:0] tm137;
   wire signed [16:0] tm138;
   wire signed [16:0] tm139;
   wire signed [16:0] tm140;
   wire signed [16:0] tm141;
   wire signed [16:0] tm142;
   wire signed [16:0] tm143;
   wire signed [15:0] t468;
   wire signed [15:0] t469;
   wire signed [15:0] t470;
   wire signed [15:0] t471;
   wire signed [15:0] t476;
   wire signed [15:0] t477;
   wire signed [15:0] t478;
   wire signed [15:0] t479;
   wire signed [15:0] t496;
   wire signed [15:0] t497;
   wire signed [15:0] t498;
   wire signed [15:0] t499;
   wire signed [15:0] t510;
   wire signed [15:0] t511;
   wire signed [15:0] t512;
   wire signed [15:0] t513;
   wire signed [15:0] t518;
   wire signed [15:0] t519;
   wire signed [15:0] t520;
   wire signed [15:0] t521;
   reg signed [15:0] tm166;
   reg signed [15:0] tm169;
   reg signed [15:0] tm178;
   reg signed [15:0] tm181;
   reg signed [15:0] tm201;
   reg signed [15:0] tm204;
   reg signed [15:0] tm207;
   reg signed [15:0] tm210;
   reg signed [15:0] tm213;
   reg signed [15:0] tm216;
   reg signed [15:0] tm219;
   reg signed [15:0] tm222;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm112;
   wire signed [16:0] tm113;
   wire signed [16:0] tm114;
   wire signed [16:0] tm115;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [16:0] tm116;
   wire signed [16:0] tm117;
   wire signed [16:0] tm118;
   wire signed [16:0] tm119;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [16:0] tm128;
   wire signed [16:0] tm129;
   wire signed [16:0] tm130;
   wire signed [16:0] tm131;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [16:0] tm132;
   wire signed [16:0] tm133;
   wire signed [16:0] tm134;
   wire signed [16:0] tm135;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [16:0] tm144;
   wire signed [16:0] tm145;
   wire signed [16:0] tm146;
   wire signed [16:0] tm147;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [16:0] tm148;
   wire signed [16:0] tm149;
   wire signed [16:0] tm150;
   wire signed [16:0] tm151;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;
   wire signed [15:0] t480;
   wire signed [15:0] t481;
   wire signed [15:0] t482;
   wire signed [15:0] t483;
   wire signed [15:0] t484;
   wire signed [15:0] t485;
   wire signed [15:0] t486;
   wire signed [15:0] t487;
   wire signed [15:0] t500;
   wire signed [15:0] t501;
   wire signed [15:0] t502;
   wire signed [15:0] t503;
   wire signed [15:0] t504;
   wire signed [15:0] t505;
   wire signed [15:0] t506;
   wire signed [15:0] t507;
   wire signed [15:0] t522;
   wire signed [15:0] t523;
   wire signed [15:0] t524;
   wire signed [15:0] t525;
   wire signed [15:0] t526;
   wire signed [15:0] t527;
   wire signed [15:0] t528;
   wire signed [15:0] t529;
   reg signed [15:0] tm202;
   reg signed [15:0] tm205;
   reg signed [15:0] tm208;
   reg signed [15:0] tm211;
   reg signed [15:0] tm214;
   reg signed [15:0] tm217;
   reg signed [15:0] tm220;
   reg signed [15:0] tm223;

   wire signed [15:0] tm0;
   assign tm0 = 16'h2d41;
   wire signed [15:0] tm2;
   assign tm2 = 16'h3b21;
   wire signed [15:0] tm3;
   assign tm3 = 16'h187e;

   assign a121 = X0;
   assign a122 = X16;
   assign a123 = X1;
   assign a124 = X17;
   assign a129 = X8;
   assign a130 = X24;
   assign a131 = X9;
   assign a132 = X25;
   assign a137 = X18;
   assign a138 = X19;
   assign a139 = X2;
   assign a140 = X3;
   assign a143 = X10;
   assign a144 = X11;
   assign a147 = X26;
   assign a148 = X27;
   assign a151 = X4;
   assign a152 = X21;
   assign a153 = X5;
   assign a154 = X20;
   assign a159 = X12;
   assign a160 = X13;
   assign a161 = X29;
   assign a162 = X28;
   assign a163 = X23;
   assign a164 = X22;
   assign a165 = X6;
   assign a166 = X7;
   assign a169 = X14;
   assign a170 = X15;
   assign a173 = X30;
   assign a174 = X31;
   assign t450 = tm88[16:1];
   assign t451 = tm89[16:1];
   assign t452 = tm90[16:1];
   assign t453 = tm91[16:1];
   assign t454 = tm92[16:1];
   assign t455 = tm93[16:1];
   assign t456 = tm94[16:1];
   assign t457 = tm95[16:1];
   assign t488 = tm120[16:1];
   assign t489 = tm121[16:1];
   assign t490 = tm122[16:1];
   assign t491 = tm123[16:1];
   assign t458 = tm96[16:1];
   assign t459 = tm97[16:1];
   assign t460 = tm98[16:1];
   assign t461 = tm99[16:1];
   assign t462 = tm100[16:1];
   assign t463 = tm101[16:1];
   assign t464 = tm102[16:1];
   assign t465 = tm103[16:1];
   assign t468 = tm104[16:1];
   assign t469 = tm105[16:1];
   assign t470 = tm106[16:1];
   assign t471 = tm107[16:1];
   assign t476 = tm108[16:1];
   assign t477 = tm109[16:1];
   assign t478 = tm110[16:1];
   assign t479 = tm111[16:1];
   assign t496 = tm124[16:1];
   assign t497 = tm125[16:1];
   assign t498 = tm126[16:1];
   assign t499 = tm127[16:1];
   assign t510 = tm136[16:1];
   assign t511 = tm137[16:1];
   assign t512 = tm138[16:1];
   assign t513 = tm139[16:1];
   assign t518 = tm140[16:1];
   assign t519 = tm141[16:1];
   assign t520 = tm142[16:1];
   assign t521 = tm143[16:1];
   assign Y0 = tm202;
   assign Y1 = tm205;
   assign Y4 = tm208;
   assign Y5 = tm211;
   assign Y2 = tm214;
   assign Y3 = tm217;
   assign Y6 = tm220;
   assign Y7 = tm223;
   assign Y8 = t480;
   assign Y9 = t481;
   assign Y12 = t482;
   assign Y13 = t483;
   assign Y10 = t484;
   assign Y11 = t485;
   assign Y14 = t486;
   assign Y15 = t487;
   assign Y16 = t500;
   assign Y17 = t501;
   assign Y20 = t502;
   assign Y21 = t503;
   assign Y18 = t504;
   assign Y19 = t505;
   assign Y22 = t506;
   assign Y23 = t507;
   assign Y24 = t522;
   assign Y25 = t523;
   assign Y28 = t524;
   assign Y29 = t525;
   assign Y26 = t526;
   assign Y27 = t527;
   assign Y30 = t528;
   assign Y31 = t529;
   assign t480 = tm112[16:1];
   assign t481 = tm113[16:1];
   assign t482 = tm114[16:1];
   assign t483 = tm115[16:1];
   assign t484 = tm116[16:1];
   assign t485 = tm117[16:1];
   assign t486 = tm118[16:1];
   assign t487 = tm119[16:1];
   assign t500 = tm128[16:1];
   assign t501 = tm129[16:1];
   assign t502 = tm130[16:1];
   assign t503 = tm131[16:1];
   assign t504 = tm132[16:1];
   assign t505 = tm133[16:1];
   assign t506 = tm134[16:1];
   assign t507 = tm135[16:1];
   assign t522 = tm144[16:1];
   assign t523 = tm145[16:1];
   assign t524 = tm146[16:1];
   assign t525 = tm147[16:1];
   assign t526 = tm148[16:1];
   assign t527 = tm149[16:1];
   assign t528 = tm150[16:1];
   assign t529 = tm151[16:1];

    addfxp #(17, 1) add11894(.a({{1{a121[15]}}, a121}), .b({{1{a122[15]}}, a122}), .clk(clk), .q(tm88));    // 0
    addfxp #(17, 1) add11909(.a({{1{a123[15]}}, a123}), .b({{1{a124[15]}}, a124}), .clk(clk), .q(tm89));    // 0
    subfxp #(17, 1) sub11924(.a({{1{a121[15]}}, a121}), .b({{1{a122[15]}}, a122}), .clk(clk), .q(tm90));    // 0
    subfxp #(17, 1) sub11939(.a({{1{a123[15]}}, a123}), .b({{1{a124[15]}}, a124}), .clk(clk), .q(tm91));    // 0
    addfxp #(17, 1) add11954(.a({{1{a129[15]}}, a129}), .b({{1{a130[15]}}, a130}), .clk(clk), .q(tm92));    // 0
    addfxp #(17, 1) add11969(.a({{1{a131[15]}}, a131}), .b({{1{a132[15]}}, a132}), .clk(clk), .q(tm93));    // 0
    subfxp #(17, 1) sub11984(.a({{1{a129[15]}}, a129}), .b({{1{a130[15]}}, a130}), .clk(clk), .q(tm94));    // 0
    subfxp #(17, 1) sub11999(.a({{1{a131[15]}}, a131}), .b({{1{a132[15]}}, a132}), .clk(clk), .q(tm95));    // 0
    addfxp #(17, 1) add12414(.a({{1{a151[15]}}, a151}), .b({{1{a152[15]}}, a152}), .clk(clk), .q(tm120));    // 0
    subfxp #(17, 1) sub12429(.a({{1{a153[15]}}, a153}), .b({{1{a154[15]}}, a154}), .clk(clk), .q(tm121));    // 0
    subfxp #(17, 1) sub12444(.a({{1{a151[15]}}, a151}), .b({{1{a152[15]}}, a152}), .clk(clk), .q(tm122));    // 0
    addfxp #(17, 1) add12459(.a({{1{a153[15]}}, a153}), .b({{1{a154[15]}}, a154}), .clk(clk), .q(tm123));    // 0
    addfxp #(17, 1) add12006(.a({{1{t450[15]}}, t450}), .b({{1{t454[15]}}, t454}), .clk(clk), .q(tm96));    // 1
    addfxp #(17, 1) add12013(.a({{1{t451[15]}}, t451}), .b({{1{t455[15]}}, t455}), .clk(clk), .q(tm97));    // 1
    subfxp #(17, 1) sub12020(.a({{1{t450[15]}}, t450}), .b({{1{t454[15]}}, t454}), .clk(clk), .q(tm98));    // 1
    subfxp #(17, 1) sub12027(.a({{1{t451[15]}}, t451}), .b({{1{t455[15]}}, t455}), .clk(clk), .q(tm99));    // 1
    addfxp #(17, 1) add12050(.a({{1{t452[15]}}, t452}), .b({{1{t457[15]}}, t457}), .clk(clk), .q(tm100));    // 1
    subfxp #(17, 1) sub12057(.a({{1{t453[15]}}, t453}), .b({{1{t456[15]}}, t456}), .clk(clk), .q(tm101));    // 1
    subfxp #(17, 1) sub12064(.a({{1{t452[15]}}, t452}), .b({{1{t457[15]}}, t457}), .clk(clk), .q(tm102));    // 1
    addfxp #(17, 1) add12071(.a({{1{t453[15]}}, t453}), .b({{1{t456[15]}}, t456}), .clk(clk), .q(tm103));    // 1
    multfix #(16, 2) m12098(.a(tm0), .b(a137), .clk(clk), .q_sc(a97), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12109(.a(tm0), .b(a138), .clk(clk), .q_sc(a98), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12178(.a(tm2), .b(a143), .clk(clk), .q_sc(a99), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12189(.a(tm3), .b(a144), .clk(clk), .q_sc(a100), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12207(.a(tm2), .b(a144), .clk(clk), .q_sc(a101), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12218(.a(tm3), .b(a143), .clk(clk), .q_sc(a102), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12236(.a(tm3), .b(a147), .clk(clk), .q_sc(a103), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12247(.a(tm2), .b(a148), .clk(clk), .q_sc(a104), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12265(.a(tm3), .b(a148), .clk(clk), .q_sc(a105), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12276(.a(tm2), .b(a147), .clk(clk), .q_sc(a106), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12470(.a(tm0), .b(a159), .clk(clk), .q_sc(a107), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12481(.a(tm0), .b(a160), .clk(clk), .q_sc(a108), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12506(.a(tm0), .b(a161), .clk(clk), .q_sc(a109), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12517(.a(tm0), .b(a162), .clk(clk), .q_sc(a110), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12658(.a(tm0), .b(a163), .clk(clk), .q_sc(a111), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12669(.a(tm0), .b(a164), .clk(clk), .q_sc(a112), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12738(.a(tm3), .b(a169), .clk(clk), .q_sc(a113), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12749(.a(tm2), .b(a170), .clk(clk), .q_sc(a114), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12767(.a(tm3), .b(a170), .clk(clk), .q_sc(a115), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12778(.a(tm2), .b(a169), .clk(clk), .q_sc(a116), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12796(.a(tm2), .b(a173), .clk(clk), .q_sc(a117), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12807(.a(tm3), .b(a174), .clk(clk), .q_sc(a118), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12825(.a(tm3), .b(a173), .clk(clk), .q_sc(a119), .q_unsc(), .rst(reset));
    multfix #(16, 2) m12836(.a(tm2), .b(a174), .clk(clk), .q_sc(a120), .q_unsc(), .rst(reset));
    addfxp #(16, 1) add12116(.a(a97), .b(a98), .clk(clk), .q(t466));    // 2
    subfxp #(16, 1) sub12123(.a(a98), .b(a97), .clk(clk), .q(t467));    // 2
    addfxp #(16, 1) add12196(.a(a99), .b(a100), .clk(clk), .q(t472));    // 2
    subfxp #(16, 1) sub12225(.a(a101), .b(a102), .clk(clk), .q(t473));    // 2
    addfxp #(16, 1) add12254(.a(a103), .b(a104), .clk(clk), .q(t474));    // 2
    subfxp #(16, 1) sub12283(.a(a105), .b(a106), .clk(clk), .q(t475));    // 2
    addfxp #(16, 1) add12488(.a(a107), .b(a108), .clk(clk), .q(t492));    // 2
    subfxp #(16, 1) sub12495(.a(a108), .b(a107), .clk(clk), .q(t493));    // 2
    subfxp #(16, 1) sub12524(.a(a109), .b(a110), .clk(clk), .q(t494));    // 2
    addfxp #(16, 1) add12531(.a(a110), .b(a109), .clk(clk), .q(t495));    // 2
    subfxp #(16, 1) sub12676(.a(a111), .b(a112), .clk(clk), .q(t508));    // 2
    addfxp #(16, 1) add12683(.a(a112), .b(a111), .clk(clk), .q(t509));    // 2
    addfxp #(16, 1) add12756(.a(a113), .b(a114), .clk(clk), .q(t514));    // 2
    subfxp #(16, 1) sub12785(.a(a115), .b(a116), .clk(clk), .q(t515));    // 2
    addfxp #(16, 1) add12814(.a(a117), .b(a118), .clk(clk), .q(t516));    // 2
    subfxp #(16, 1) sub12843(.a(a119), .b(a120), .clk(clk), .q(t517));    // 2
    addfxp #(17, 1) add12134(.a({{1{tm154[15]}}, tm154}), .b({{1{t466[15]}}, t466}), .clk(clk), .q(tm104));    // 3
    addfxp #(17, 1) add12145(.a({{1{tm157[15]}}, tm157}), .b({{1{t467[15]}}, t467}), .clk(clk), .q(tm105));    // 3
    subfxp #(17, 1) sub12156(.a({{1{tm154[15]}}, tm154}), .b({{1{t466[15]}}, t466}), .clk(clk), .q(tm106));    // 3
    subfxp #(17, 1) sub12167(.a({{1{tm157[15]}}, tm157}), .b({{1{t467[15]}}, t467}), .clk(clk), .q(tm107));    // 3
    addfxp #(17, 1) add12290(.a({{1{t472[15]}}, t472}), .b({{1{t474[15]}}, t474}), .clk(clk), .q(tm108));    // 3
    addfxp #(17, 1) add12297(.a({{1{t473[15]}}, t473}), .b({{1{t475[15]}}, t475}), .clk(clk), .q(tm109));    // 3
    subfxp #(17, 1) sub12304(.a({{1{t472[15]}}, t472}), .b({{1{t474[15]}}, t474}), .clk(clk), .q(tm110));    // 3
    subfxp #(17, 1) sub12311(.a({{1{t473[15]}}, t473}), .b({{1{t475[15]}}, t475}), .clk(clk), .q(tm111));    // 3
    addfxp #(17, 1) add12538(.a({{1{t492[15]}}, t492}), .b({{1{t494[15]}}, t494}), .clk(clk), .q(tm124));    // 3
    subfxp #(17, 1) sub12545(.a({{1{t493[15]}}, t493}), .b({{1{t495[15]}}, t495}), .clk(clk), .q(tm125));    // 3
    subfxp #(17, 1) sub12552(.a({{1{t492[15]}}, t492}), .b({{1{t494[15]}}, t494}), .clk(clk), .q(tm126));    // 3
    addfxp #(17, 1) add12559(.a({{1{t493[15]}}, t493}), .b({{1{t495[15]}}, t495}), .clk(clk), .q(tm127));    // 3
    addfxp #(17, 1) add12694(.a({{1{tm190[15]}}, tm190}), .b({{1{t508[15]}}, t508}), .clk(clk), .q(tm136));    // 3
    subfxp #(17, 1) sub12705(.a({{1{tm193[15]}}, tm193}), .b({{1{t509[15]}}, t509}), .clk(clk), .q(tm137));    // 3
    subfxp #(17, 1) sub12716(.a({{1{tm190[15]}}, tm190}), .b({{1{t508[15]}}, t508}), .clk(clk), .q(tm138));    // 3
    addfxp #(17, 1) add12727(.a({{1{tm193[15]}}, tm193}), .b({{1{t509[15]}}, t509}), .clk(clk), .q(tm139));    // 3
    subfxp #(17, 1) sub12850(.a({{1{t514[15]}}, t514}), .b({{1{t516[15]}}, t516}), .clk(clk), .q(tm140));    // 3
    addfxp #(17, 1) add12857(.a({{1{t515[15]}}, t515}), .b({{1{t517[15]}}, t517}), .clk(clk), .q(tm141));    // 3
    addfxp #(17, 1) add12864(.a({{1{t514[15]}}, t514}), .b({{1{t516[15]}}, t516}), .clk(clk), .q(tm142));    // 3
    subfxp #(17, 1) sub12871(.a({{1{t515[15]}}, t515}), .b({{1{t517[15]}}, t517}), .clk(clk), .q(tm143));    // 3
    addfxp #(17, 1) add12318(.a({{1{t468[15]}}, t468}), .b({{1{t476[15]}}, t476}), .clk(clk), .q(tm112));    // 4
    addfxp #(17, 1) add12325(.a({{1{t469[15]}}, t469}), .b({{1{t477[15]}}, t477}), .clk(clk), .q(tm113));    // 4
    subfxp #(17, 1) sub12332(.a({{1{t468[15]}}, t468}), .b({{1{t476[15]}}, t476}), .clk(clk), .q(tm114));    // 4
    subfxp #(17, 1) sub12339(.a({{1{t469[15]}}, t469}), .b({{1{t477[15]}}, t477}), .clk(clk), .q(tm115));    // 4
    addfxp #(17, 1) add12362(.a({{1{t470[15]}}, t470}), .b({{1{t479[15]}}, t479}), .clk(clk), .q(tm116));    // 4
    subfxp #(17, 1) sub12369(.a({{1{t471[15]}}, t471}), .b({{1{t478[15]}}, t478}), .clk(clk), .q(tm117));    // 4
    subfxp #(17, 1) sub12376(.a({{1{t470[15]}}, t470}), .b({{1{t479[15]}}, t479}), .clk(clk), .q(tm118));    // 4
    addfxp #(17, 1) add12383(.a({{1{t471[15]}}, t471}), .b({{1{t478[15]}}, t478}), .clk(clk), .q(tm119));    // 4
    addfxp #(17, 1) add12566(.a({{1{tm166[15]}}, tm166}), .b({{1{t496[15]}}, t496}), .clk(clk), .q(tm128));    // 4
    addfxp #(17, 1) add12573(.a({{1{tm169[15]}}, tm169}), .b({{1{t497[15]}}, t497}), .clk(clk), .q(tm129));    // 4
    subfxp #(17, 1) sub12580(.a({{1{tm166[15]}}, tm166}), .b({{1{t496[15]}}, t496}), .clk(clk), .q(tm130));    // 4
    subfxp #(17, 1) sub12587(.a({{1{tm169[15]}}, tm169}), .b({{1{t497[15]}}, t497}), .clk(clk), .q(tm131));    // 4
    addfxp #(17, 1) add12610(.a({{1{tm178[15]}}, tm178}), .b({{1{t499[15]}}, t499}), .clk(clk), .q(tm132));    // 4
    subfxp #(17, 1) sub12617(.a({{1{tm181[15]}}, tm181}), .b({{1{t498[15]}}, t498}), .clk(clk), .q(tm133));    // 4
    subfxp #(17, 1) sub12624(.a({{1{tm178[15]}}, tm178}), .b({{1{t499[15]}}, t499}), .clk(clk), .q(tm134));    // 4
    addfxp #(17, 1) add12631(.a({{1{tm181[15]}}, tm181}), .b({{1{t498[15]}}, t498}), .clk(clk), .q(tm135));    // 4
    addfxp #(17, 1) add12878(.a({{1{t510[15]}}, t510}), .b({{1{t518[15]}}, t518}), .clk(clk), .q(tm144));    // 4
    addfxp #(17, 1) add12885(.a({{1{t511[15]}}, t511}), .b({{1{t519[15]}}, t519}), .clk(clk), .q(tm145));    // 4
    subfxp #(17, 1) sub12892(.a({{1{t510[15]}}, t510}), .b({{1{t518[15]}}, t518}), .clk(clk), .q(tm146));    // 4
    subfxp #(17, 1) sub12899(.a({{1{t511[15]}}, t511}), .b({{1{t519[15]}}, t519}), .clk(clk), .q(tm147));    // 4
    addfxp #(17, 1) add12922(.a({{1{t512[15]}}, t512}), .b({{1{t521[15]}}, t521}), .clk(clk), .q(tm148));    // 4
    subfxp #(17, 1) sub12929(.a({{1{t513[15]}}, t513}), .b({{1{t520[15]}}, t520}), .clk(clk), .q(tm149));    // 4
    subfxp #(17, 1) sub12936(.a({{1{t512[15]}}, t512}), .b({{1{t521[15]}}, t521}), .clk(clk), .q(tm150));    // 4
    addfxp #(17, 1) add12943(.a({{1{t513[15]}}, t513}), .b({{1{t520[15]}}, t520}), .clk(clk), .q(tm151));    // 4


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm152 <= a139;
         tm155 <= a140;
         tm188 <= a165;
         tm191 <= a166;
         tm153 <= tm152;
         tm156 <= tm155;
         tm164 <= t488;
         tm167 <= t489;
         tm176 <= t490;
         tm179 <= t491;
         tm189 <= tm188;
         tm192 <= tm191;
         tm154 <= tm153;
         tm157 <= tm156;
         tm165 <= tm164;
         tm168 <= tm167;
         tm177 <= tm176;
         tm180 <= tm179;
         tm190 <= tm189;
         tm193 <= tm192;
         tm200 <= t458;
         tm203 <= t459;
         tm206 <= t460;
         tm209 <= t461;
         tm212 <= t462;
         tm215 <= t463;
         tm218 <= t464;
         tm221 <= t465;
         tm166 <= tm165;
         tm169 <= tm168;
         tm178 <= tm177;
         tm181 <= tm180;
         tm201 <= tm200;
         tm204 <= tm203;
         tm207 <= tm206;
         tm210 <= tm209;
         tm213 <= tm212;
         tm216 <= tm215;
         tm219 <= tm218;
         tm222 <= tm221;
         tm202 <= tm201;
         tm205 <= tm204;
         tm208 <= tm207;
         tm211 <= tm210;
         tm214 <= tm213;
         tm217 <= tm216;
         tm220 <= tm219;
         tm223 <= tm222;
      end
   end
endmodule

// Latency: 1
// Gap: 1
module codeBlock12965(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   assign next_out = next;


   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] Y16;
   wire signed [15:0] Y17;
   wire signed [15:0] Y18;
   wire signed [15:0] Y19;
   wire signed [15:0] Y20;
   wire signed [15:0] Y21;
   wire signed [15:0] Y22;
   wire signed [15:0] Y23;
   wire signed [15:0] Y24;
   wire signed [15:0] Y25;
   wire signed [15:0] Y26;
   wire signed [15:0] Y27;
   wire signed [15:0] Y28;
   wire signed [15:0] Y29;
   wire signed [15:0] Y30;
   wire signed [15:0] Y31;


   assign Y0 = X0;
   assign Y1 = X1;
   assign Y2 = X8;
   assign Y3 = X9;
   assign Y4 = X16;
   assign Y5 = X17;
   assign Y6 = X24;
   assign Y7 = X25;
   assign Y8 = X2;
   assign Y9 = X3;
   assign Y10 = X10;
   assign Y11 = X11;
   assign Y12 = X18;
   assign Y13 = X19;
   assign Y14 = X26;
   assign Y15 = X27;
   assign Y16 = X4;
   assign Y17 = X5;
   assign Y18 = X12;
   assign Y19 = X13;
   assign Y20 = X20;
   assign Y21 = X21;
   assign Y22 = X28;
   assign Y23 = X29;
   assign Y24 = X6;
   assign Y25 = X7;
   assign Y26 = X14;
   assign Y27 = X15;
   assign Y28 = X22;
   assign Y29 = X23;
   assign Y30 = X30;
   assign Y31 = X31;



   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule


// module multfix(clk, rst, a, b, q_sc, q_unsc);
//    parameter WIDTH=35, CYCLES=6;

//    input signed [WIDTH-1:0]    a,b;
//    output [WIDTH-1:0]          q_sc;
//    output [WIDTH-1:0]              q_unsc;

//    input                       clk, rst;
   
//    reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
//    wire signed [2*WIDTH-1:0]   res;   
//    integer                     i;

//    assign                      res = q[CYCLES-1];   
   
//    assign                      q_unsc = res[WIDTH-1:0];
//    assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
      
//    always @(posedge clk) begin
//       q[0] <= a * b;
//       for (i = 1; i < CYCLES; i=i+1) begin
//          q[i] <= q[i-1];
//       end
//    end
                  
// endmodule 
// module addfxp(a, b, q, clk);

//    parameter width = 16, cycles=1;
   
//    input signed [width-1:0]  a, b;
//    input                     clk;   
//    output signed [width-1:0] q;
//    reg signed [width-1:0]    res[cycles-1:0];

//    assign                    q = res[cycles-1];
   
//    integer                   i;   
   
//    always @(posedge clk) begin
//      res[0] <= a+b;
//       for (i=1; i < cycles; i = i+1)
//         res[i] <= res[i-1];
      
//    end
   
// endmodule

// module subfxp(a, b, q, clk);

//    parameter width = 16, cycles=1;
   
//    input signed [width-1:0]  a, b;
//    input                     clk;   
//    output signed [width-1:0] q;
//    reg signed [width-1:0]    res[cycles-1:0];

//    assign                    q = res[cycles-1];
   
//    integer                   i;   
   
//    always @(posedge clk) begin
//      res[0] <= a-b;
//       for (i=1; i < cycles; i = i+1)
//         res[i] <= res[i-1];
      
//    end
  
// endmodule
